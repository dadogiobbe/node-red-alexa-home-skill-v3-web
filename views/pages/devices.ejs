<% include ../fragments/header.ejs %>

<% if (grants == 0) { %>
	<div class="alert alert-danger alert-dismissible fade show" role="alert">
		<strong>Warning!</strong> You still need to link your Amazon Account via the Alexa App! See <a href='https://github.com/coldfire84/node-red-alexa-home-skill-v3-web/wiki/Use-the-Hosted-Instance'>here</a> for more information.
		<button type="button" class="close" data-dismiss="alert" aria-label="Close">
		<span aria-hidden="true">&times;</span>
		</button>
	</div>
<% } %>

<div class="container main-content">
	<h1>Devices for User: <%= user.username %></h1>
	<h3>Total Count: <%= count %></h3>
	<table class="table table-striped">
		<thead>
			<tr>
				<th scope="col">Name</th>
				<th scope="col">Description</th>
				<th scope="col">Capabilities</th>
				<th scope="col">Manage</th>
			</tr>
		</thead>
		<tbody>
			<% devices.forEach(function(device){ %>
				<tr>
					<th scope="row"><%= device.friendlyName %></th>
					<td><%= device.description %></td>
					<td>
						<% device.capabilities.forEach(function(action){ %>
							<img class="action" src="/images/<%= action %>.png" title="<%= action %>">
						<% }); %>
					</td>
					<td>
						<button type="button" class="btn btn-secondary" onclick="edit('<%= device._id %>')">Edit</button>
						<button type="button" class="btn btn-secondary" onclick="deleteDevice('<%= device._id%>')">Delete</button>
					</td>
				</tr>
			<% }); %>
		</tbody>
	</table>
	<div style="padding-top: 10px;">
		<button type="button" class="btn btn-secondary" onclick="addDevice();">Add Device</button>
	</div>
	<br />
	<p>After making any changes remember to ask Alexa to update devices it knows about by saying "Alexa, discover devices"</p>
</div>

<% include ../fragments/device-modal.ejs %>

<script>
		
$("#form-device").submit(function(e) {
	e.preventDefault();
	saveDevice()
});

// Enable/ disable minimumValue/ maximumValue and scale elements
$("#ThermostatController").change(function(e) {
	if ( $(this).is(':checked') == false) {
		$('#validRangeOptions').hide();
		$('#validRangeScaleOptions').hide();
		$('#maximumValue').attr("disabled", "disabled"); 
		$('#minimumValue').attr("disabled", "disabled");
		$('#Celsius').attr("disabled", "disabled"); 
		$('#Farenheit').attr("disabled", "disabled");
		$("#maximumValue").prop('required',false);
		$("#minimumValue").prop('required',false);
		$("#Celsius").prop('required',false);
		$("#Farenheit").prop('required',false);
	}
	else {
		$('#validRangeOptions').show();
		$('#validRangeScaleOptions').show();
		$('#maximumValue').removeAttr("disabled"); 
		$('#minimumValue').removeAttr("disabled");
		$('#Celsius').removeAttr("disabled");
		$('#Farenheit').removeAttr("disabled");
		$("#maximumValue").prop('required',true);
		$("#minimumValue").prop('required',true);
		$("#Celsius").prop('required',true);
		$("#Farenheit").prop('required',true);
	}
});

// Enable Celsius and Farenheit options for Temperature Sesnor
$("#TemperatureSensor").change(function(e) {
	if ( $(this).is(':checked') == false) {
		$('#validRangeScaleOptions').hide();
		$("#Celsius").prop('required',false);
		$("#Farenheit").prop('required',false);
		$('#Celsius').attr("disabled", "disabled"); 
		$('#Farenheit').attr("disabled", "disabled");
	}
	else {
		$('#validRangeScaleOptions').show();
		$('#Celsius').removeAttr("disabled");
		$('#Farenheit').removeAttr("disabled");
		$("#Celsius").prop('required',true);
		$("#Farenheit").prop('required',true);
	}
});

// Enable/ disable minimumValue/ maximumValue elements
$("#ColorTemperatureController").change(function(e) {
	if ( $(this).is(':checked') == false ) {
		$('#validRangeOptions').hide();
		$('#maximumValue').attr("disabled", "disabled"); 
		$('#minimumValue').attr("disabled", "disabled");
		$("#maximumValue").prop('required',false);
		$("#minimumValue").prop('required',false);
	}
	else {
		$('#validRangeOptions').show();
		$('#maximumValue').removeAttr("disabled"); 
		$('#minimumValue').removeAttr("disabled");
		$("#maximumValue").prop('required',true);
		$("#minimumValue").prop('required',true);
	}
});

function saveDevice() {
	var devID = $('#devID').val();

	// Add New Device
	if ( devID === "") {
		var device = {
			capabilities: [],
			displayCategories: [],
		};
		device.friendlyName = $('#friendlyName').val();
		device.description = $('#description').val();
		if ($('#ThermostatController').prop('checked') || $('#TemperatureSensor').prop('checked') || $('#ColorTemperatureController').prop('checked')) {
			var scale;
			$('input[name=radioScale]').each(function(index){
				if (this.checked) {
					scale = this.value;
				}
			});
		}
		if ($('#ThermostatController').prop('checked') || $('#ColorTemperatureController').prop('checked')) {
			device.validRange = {
					minimumValue: $('#minimumValue').val(),
					maximumValue: $('#maximumValue').val(),
					scale: scale
				}
		}
		else if ( $('#TemperatureSensor').prop('checked')) {
			device.validRange = {
				scale: scale
				}
		}
		$('input[name=capabilities]').each(function(index){
			if (this.checked) {
				device.capabilities.push(this.value);
			}
		});
		$('input[name=appType]').each(function(index){
			if (this.checked) {
				device.displayCategories.push(this.value);
			}
		});

		if ($('#ReportState').prop('checked')) {
			device.reportState = true;
		}
		else {device.reportState = false}

		// Generate/ save dummy state data for new device
		// This will significantly reduce getstate API traffic and make usability far easier
		device.state = generateState(null);

		if (device.friendlyName && device.description && device.capabilities.length > 0) {
			$.ajax({
				url:"/devices",
				type: 'PUT',
				data: JSON.stringify(device),
				dataType: 'json',
				contentType: "application/json",
				success: function(data){
					//console.log(data);
					//reload
					document.location.reload();
				}
			}).fail(function(){
				alert("failed to create device");
			});
		} else {
			alert("Name or desciption can not be empty and at least one action is needed");
		}
	} else {
		// Modify Existing Device
		var device = devices[devID];
		device.description = $('#description').val();

		if ($('#ThermostatController').prop('checked') || $('#TemperatureSensor').prop('checked') || $('#ColorTemperatureController').prop('checked')) {
			var scale;
			$('input[name=radioScale]').each(function(index){
				if (this.checked) {
					scale = this.value;
				}
			});
		}
		if ($('#ThermostatController').prop('checked') || $('#ColorTemperatureController').prop('checked')) {
			device.validRange = {
					minimumValue: $('#minimumValue').val(),
					maximumValue: $('#maximumValue').val(),
					scale: scale
				}
		}

		device.capabilities = [];
		$('input[name=capabilities]').each(function(index){
			if (this.checked) {
				device.capabilities.push(this.value);
			}
		});
		device.displayCategories = [];
		$('input[name=appType]').each(function(index){
			if (this.checked) {
				device.displayCategories.push(this.value);
			}
		});

		if ($('#ReportState').prop('checked')) {
			device.reportState = true;
		}
		else {device.reportState = false}

		// validate state data, create dummy state data in the event user added new capabilities
		device.state = generateState(device.state);

		if (device.friendlyName && device.description && device.capabilities.length > 0) {
			//post update
			$.ajax({
				url: '/device/' + device._id,
				type: 'POST',
				data: JSON.stringify(device),
				dataType: 'json',
				contentType: "application/json",
				success: function(data){
					//console.log("post response");
					//console.log(data);
					//reload
					document.location.reload();
				},
			});
			// console.log(JSON.stringify(device));
		} else {
			alert("Name or desciption can not be empty and at least one action is needed");
		}
	}
	//$('#newDeviceModal').hide();
}

function addDevice() {
	clearDevice();
	checkCapability();
	$("#newDeviceModal").modal();
	//$("#dialog").dialog("open");
}

function clearDevice() {
	$('#devID').val("");
	$('#friendlyName').val("");
	$('#friendlyName').prop('readonly', false);
	$('#description').val("");
	$('input[name=capabilities]').each(function(index){
		this.checked = false;
	});
	$('input[name=appType]').each(function(index) {
		this.checked = false;
	});
	$('#ReportState').prop('checked', false)
	$('#validRangeOptions').hide();
	$('#validRangeScaleOptions').hide();
	$('#maximumValue').val(""); 
	$('#minimumValue').val("");
	$('#maximumValue').attr("disabled", "disabled"); 
	$('#minimumValue').attr("disabled", "disabled");
	$('#Celsius').attr("disabled", "disabled"); 
	$('#Farenheit').attr("disabled", "disabled");
	$("#maximumValue").prop('required',false);
	$("#minimumValue").prop('required',false);
	$("#Celsius").prop('required',false);
	$("#Farenheit").prop('required',false);
	$('input[name=radioScale]').each(function(index){
		this.checked = false;
	});
}

function edit(id) {
	clearDevice();
	$("#newDeviceModal").modal();
	var device = devices[id];
	$('#devID').val(device._id);
	$('#friendlyName').val(device.friendlyName);
	$('#friendlyName').prop('readonly', true);
	$('#description').val(device.description);
	device.capabilities.forEach(function(action){
		$('#' + action).prop('checked',true);
	});
	device.displayCategories.forEach(function(type){
		$('#' + type).prop('checked',true);
	});

	// Capabilities with range/ scale
	var colorTemperature = $('#ColorTemperatureController').prop('checked');
	var thermostat = $('#ThermostatController').prop('checked');
	var temperature = $('#TemperatureSensor').prop('checked');


	// reportState Boolean
	if (device.hasOwnProperty('reportState')) {
		if (device.reportState == true) {$('#ReportState').prop('checked', true)};
		if (device.reportState == false) {$('#ReportState').prop('checked', false)};
	}

	// Handle min/max and scale values, only show if ThermostatController or ColorTemperatureController
	if (device.hasOwnProperty('validRange') && ( colorTemperature || thermostat || temperature) ) {
		validRange = device.validRange;
		if (validRange.hasOwnProperty('scale')) {
			$('#validRangeScaleOptions').show();
			$('#Celsius').removeAttr("disabled");
			$('#Farenheit').removeAttr("disabled");
			$("#Celsius").prop('required',true);
			$("#Farenheit").prop('required',true);
			if (validRange.scale == 'CELSIUS') {$("#Celsius").prop('checked', true)}
			if (validRange.scale == 'FARENHEIT') {$("#Farenheit").prop('checked', true)}
		}
		if (validRange.hasOwnProperty('maximumValue')) {
			$('#validRangeOptions').show();
			$("#maximumValue").prop('required',true);
			$('#maximumValue').removeAttr("disabled"); 
			$("#maximumValue").val(validRange.maximumValue);
		}
		if (validRange.hasOwnProperty('minimumValue')) {
			$('#validRangeOptions').show();
			$('#minimumValue').removeAttr("disabled");
			$("#minimumValue").prop('required',true);
			$("#minimumValue").val(validRange.minimumValue);
		}
	}
}

function deleteDevice(id) {
	var answer = confirm("Are you sure you want to delete this device?");
	if(answer) {
		$.ajax({
			url:"/device/" + id,
			type: 'DELETE',
			success: function(data){
				document.location.reload();
			}
		});
	}
}

function generateState(deviceState) {
	var dt = new Date().toISOString();
	var dummyState = {};
	dummyState.time = dt;
	//console.log("deviceState: " + JSON.stringify(deviceState));
	if (deviceState == null) { // new device, no existing state
		//console.log("No device state, generating dummy state");
		$('input[name=capabilities]:checked').each(function(index){
				switch ($(this).attr("id"))  {
					case "BrightnessController":
						dummyState.brightness = 75;
						break;
					case "ColorController": // set to green
						dummyState.colorHue = 120;
						dummyState.colorSaturation = 1;
						dummyState.brightness = 1;
						break;
					case "ColorTemperatureController": // set to warm white
						dummyState.colorTemperature = 2200;
						break;
					case "LockController":
						dummyState.lock = "UNLOCKED";
						break;
					case "PercentageController":
						dummyState.percentage = 100;
						break;
					case "PowerController":
						dummyState.power = "OFF";
						break;
					case "TemperatureSensor":
						dummyState.temperature = 22;
						break;
					case "ThermostatController":
						if ($("#Celsius").prop('checked') == true){dummyState.thermostatSetPoint = 22};
						if ($("#Farenheit").prop('checked') == true){dummyState.thermostatSetPoint = 74};
						dummyState.thermostatMode = "HEAT";
						break;
					}		
		});
	}
	else { // device has some state data already, ensure each capability has valid state data
		$('input[name=capabilities]:checked').each(function(index){
			//console.log("Existing device state, generating dummy state");
				switch ($(this).attr("id"))  {
					case "BrightnessController":
							if (deviceState.hasOwnProperty('brightness')) {
								if (typeof deviceState.brightness == 'number' && (deviceState.brightness >= 0 || deviceState.brightness <= 100)) {
									dummyState.brightness = deviceState.brightness;
								}
							}
							else {dummyState.brightness = 75}
							break;
					case "ColorController": // if no existing state set to green
						if (deviceState.hasOwnProperty('colorHue')) {
								if (typeof deviceState.colorHue == 'number' && (deviceState.colorHue >= 0 || deviceState.colorHue <= 360)) {
									dummyState.colorHue = deviceState.colorHue;
								}
						}
						else {dummyState.colorHue = 120}
						if (deviceState.hasOwnProperty('colorSaturation')) {
							if (typeof deviceState.colorSaturation == 'number' && (deviceState.colorSaturation >= 0 || deviceState.colorSaturation <= 1)) {
								dummyState.colorSaturation = deviceState.colorSaturation;
							}
						}
						else {dummyState.colorSaturation = 1}
						if (deviceState.hasOwnProperty('brightness')) {
							if (typeof deviceState.brightness == 'number' && (deviceState.brightness >= 0 || deviceState.brightness <= 1)) {
								dummyState.brightness = deviceState.brightness;
							}
						}
						else {dummyState.brightness = 1}
						break;
					case "ColorTemperatureController": // if no existing state set to warm white
						if (deviceState.hasOwnProperty('colorTemperature')) {
							if (typeof deviceState.colorTemperature == 'number' && (deviceState.colorTemperature >= 1000 || deviceState.colorTemperature <= 10000)) {
								dummyState.colorTemperature = deviceState.colorTemperature;
							}
						}
						else {dummyState.colorTemperature = 2200}
						break;
					case "LockController":
						if (deviceState.hasOwnProperty('lock')) {
							if (typeof deviceState.lock == 'string' && (deviceState.lock == 'UNLOCKED' || deviceState.lock == 'LOCKED')) {
								dummyState.lock = deviceState.lock;
							}
						}
						else {dummyState.lock = "UNLOCKED"}
						break;
					case "PowerController":
						if (deviceState.hasOwnProperty('power')) {
							if (typeof deviceState.power == 'string' && (deviceState.power == 'ON' || deviceState.power == 'OFF')) {
								dummyState.power = deviceState.power;
							}
						}
						else {dummyState.power = "OFF"}
						break;
					case "TemperatureSensor":
						if (deviceState.hasOwnProperty('temperature')) {
							if (typeof deviceState.temperature == 'number') {
								dummyState.power = deviceState.temperature;
							}
						}
						else {dummyState.temperature = 22}
						break;
					case "ThermostatController":
						if (deviceState.hasOwnProperty('thermostatSetPoint')) {
							if (typeof deviceState.thermostatSetPoint == 'number') {
								dummyState.thermostatSetPoint = deviceState.thermostatSetPoint;
							}
						}
						else {
							if ($("#Celsius").prop('checked') == true){dummyState.thermostatSetPoint = 22}
							else if ($("#Farenheit").prop('checked') == true){dummyState.thermostatSetPoint = 74}
						}
						if (deviceState.hasOwnProperty('thermostatMode')) {
							if (typeof deviceState.thermostatMode == 'string') {
								dummyState.thermostatMode = deviceState.thermostatMode;
							}
						}
						else {dummyState.thermostatMode = "HEAT"}
						break;
					}
			}
		);
	}
	//console.log("Dummy state: " + JSON.stringify(dummyState));
	return dummyState;
}

function checkCapability(check) {
	// Restrictions HERE - i.e. StepVolume/ PlaybackControl can't go with ThermostatControl/ SceneControl
	if ($('#SceneController').prop('checked')) {
		alert("Activity/ Scene selected, this must be the only capability!");
		$('#ReportState').prop('checked', false);
		$('#ACTIVITY_TRIGGER').prop('checked', true);
		// Clear other capability/ type selections
		$('input[name=appType]').each(function(index){if ($(this).attr("id") != "ACTIVITY_TRIGGER") {$('input[id^='+$(this).attr("id")+']').prop("checked", false)}});
		$('input[name=capabilities]').each(function(index){if ($(this).attr("id") != "SceneController"){$('input[id^='+$(this).attr("id")+']').prop("checked", false)}});
		return false;
	}
	else if ($('#ThermostatController').prop('checked')) {
		$('#ReportState').prop('checked', true);
		$('#TemperatureSensor').prop('checked', true);
		$('#THERMOSTAT').prop('checked', true);
		$('#TEMPERATURE_SENSOR').prop('checked', true);
		
		// Clear other capability/ type selections
		$('input[name=appType]').each(function(index){
			if ($(this).attr("id") != "THERMOSTAT" && $(this).attr("id") != "TEMPERATURE_SENSOR") {
				$('input[id^='+$(this).attr("id")+']').prop("checked", false)
			}
		});
		$('input[name=capabilities]').each(function(index){
			if ($(this).attr("id") != "ThermostatController" && $(this).attr("id") != "TemperatureSensor" && $(this).attr("id") != "PowerController") {
				$('input[id^='+$(this).attr("id")+']').prop("checked", false);
			}
		});
		return false;
	}
	else if ($('#LockController').prop('checked')) {
		alert("Lock selected, this must be the only capability!");
		$('#SMARTLOCK').prop('checked', true);
		$('#ReportState').prop('checked', true);
		// Clear other capability/ type selections
		$('input[name=appType]').each(function(index){if ($(this).attr("id") != "SMARTLOCK") {$('input[id^='+$(this).attr("id")+']').prop("checked", false)}});
		$('input[name=capabilities]').each(function(index){if ($(this).attr("id") != "LockController"){$('input[id^='+$(this).attr("id")+']').prop("checked", false)}});
		return false;
	}
	// Grouped Capabilities HERE
	else if ($('#ColorTemperatureController').prop('checked') || ($('#ColorTemperatureController').prop('checked') && $('#PowerController').prop('checked'))) {
			// Auto-select Activity (can be changed by user)
			$('#PowerController').prop('checked', true);
			$('#ReportState').prop('checked', true);
			$('#LIGHT').prop('checked', true);
			$('input[name=appType]').each(function(index){if ($(this).attr("id") != "LIGHT") {$('input[id^='+$(this).attr("id")+']').prop("checked", false)}});
		}
	else if ($('#ColorController').prop('checked') || ($('#ColorController').prop('checked') && $('#PowerController').prop('checked'))) {
		// Auto-select Activity (can be changed by user)
		$('#PowerController').prop('checked', true);
		$('#ReportState').prop('checked', true);
		$('#LIGHT').prop('checked', true);
		$('input[name=appType]').each(function(index){if ($(this).attr("id") != "LIGHT") {$('input[id^='+$(this).attr("id")+']').prop("checked", false)}});
	}
	else if ($('#BrightnessController').prop('checked') || ($('#BrightnessController').prop('checked') && $('#PowerController').prop('checked'))) {
		// Auto-select Activity (can be changed by user)
		$('#PowerController').prop('checked', true);
		$('#ReportState').prop('checked', true);
		$('#LIGHT').prop('checked', true);
		$('input[name=appType]').each(function(index){if ($(this).attr("id") != "LIGHT") {$('input[id^='+$(this).attr("id")+']').prop("checked", false)}});
	}
	// Single Capabilities HERE
	else {
		if ($('#ChannelController').prop('checked')) {
			// Auto-select Device Type (can be changed by user)
			$('#TV').prop('checked', true);
			$('#ReportState').prop('checked', false);
			$('input[name=appType]').each(function(index){if ($(this).attr("id") != "TV") {$('input[id^='+$(this).attr("id")+']').prop("checked", false)}});
		}
		if ($('#InputController').prop('checked')) {
			// Auto-select Device Type (can be changed by user)
			$('#TV').prop('checked', true);
			$('#ReportState').prop('checked', false);
			$('input[name=appType]').each(function(index){if ($(this).attr("id") != "TV") {$('input[id^='+$(this).attr("id")+']').prop("checked", false)}});
		}
		else if ($('#PowerController').prop('checked')) {
			// Auto-select Device Type (can be changed by user)
			$('#SWITCH').prop('checked', true);
			$('#ReportState').prop('checked', true);
			$('input[name=appType]').each(function(index){if ($(this).attr("id") != "SWITCH") {$('input[id^='+$(this).attr("id")+']').prop("checked", false)}});
		}
		else if ($('#StepSpeaker').prop('checked') || $('#Speaker').prop('checked')) {
			// Auto-select Device Type (can be changed by user)
			$('#SPEAKER').prop('checked', true);
			$('#ReportState').prop('checked', false);
			$('input[name=appType]').each(function(index){if ($(this).attr("id") != "SPEAKER") {$('input[id^='+$(this).attr("id")+']').prop("checked", false)}});
		}
		else if ($('#PlaybackController').prop('checked')) {
			// Auto-select Device Type (can be changed by user)
			$('#TV').prop('checked', true);
			$('#ReportState').prop('checked', false);
			$('input[name=appType]').each(function(index){if ($(this).attr("id") != "TV") {$('input[id^='+$(this).attr("id")+']').prop("checked", false)}});
		}
		else if ($('#TemperatureSensor').prop('checked')) {
			// Auto-select Device Type (can be changed by user)
			$('#TEMPERATURE_SENSOR').prop('checked', true);
			$('#ReportState').prop('checked', true);
			$('input[name=appType]').each(function(index){if ($(this).attr("id") != "TEMPERATURE_SENSOR") {$('input[id^='+$(this).attr("id")+']').prop("checked", false)}});
		}	
		else {
			// De-select ALL Activity
			$('input[name=appType]').each(function(index){$('input[id^='+$(this).attr("id")+']').prop("checked", false)});
			return false;
		}
	}
}

var devices = {};
<%- JSON.stringify(devices) %>.forEach(function(device){
	devices[device._id] = device;
});
</script>
<% include ../fragments/footer.ejs %>